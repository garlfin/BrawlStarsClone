#version 430

layout (binding = 0, rgb16f) restrict writeonly uniform imageCube outImage;
layout (binding = 1, rgb16f) restrict readonly uniform imageCube inImage;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

const float PI = 3.14159265359;

ivec3 CoordsInDirection(ivec2 coords, int direction)
{
    ivec3 result;
    switch (direction)
    {
        // Positive X, Negative X, Positive Y, Negative Y, Positive Z, Negative Z
        // Transforms X,Y and a Direction into a Vector in the direction of the Direction
        case 0:
            result = ivec3(coords.x, 0, coords.y);
            break;
        case 1:
            result = ivec3(-coords.x, 0, coords.y);
            break;
        case 2:
            result = ivec3(coords.y, 0, coords.x);
            break;
        case 3:
            result = ivec3(-coords.y, 0, coords.x);
            break;
        case 4:
            result = ivec3(coords.xy, 0);
            break;
        case 5:
            result = ivec3(-coords.x, coords.y, 0);
            break;
    }
    return result;
}

void main()
{
    ivec3 dir = CoordsInDirection(gl_GlobalInvocationID.xy, gl_GlobalInvocationID.z);
    vec3 N = normalize(vec3(dir) / vec3(imageSize(inImage)));

    vec3 irradiance = vec3(0.0);
    
    vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), N));
    vec3 up = normalize(cross(N, right));

    float sampleDelta = 0.025;
    float samples = 0.0;
    
    for(float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)
    {
        for(float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)
        {
            vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
            vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N;
            irradiance += texture(inImage, sampleVec).rgb * cos(theta) * sin(theta);
            samples++;
        }
    }
    imageStore(outImage, ivec3(gl_GlobalInvocationID), vec4(PI * irradiance / float(samples), 1.0));
}